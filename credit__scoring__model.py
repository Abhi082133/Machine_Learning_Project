# -*- coding: utf-8 -*-
"""Credit _Scoring _Model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17jWiPDHaVhFOP3W60Qn40dMtPiUopLg5
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, roc_auc_score

N = 5000
np.random.seed(42)
ages = np.random.randint(21, 70, N)
incomes = np.random.normal(60000, 15000, N)
incomes = np.clip(incomes, 10000, 150000)
loan_to_income = np.random.uniform(0.1, 0.5, N)
loan_amounts = loan_to_income * incomes + np.random.normal(0, 5000, N)
loan_amounts = np.clip(loan_amounts, 2000, None)
credit_history = np.random.randint(0, 30, N)
home_owner = np.random.binomial(1, 0.5, N)

coef_intercept = -3.0
coef_ratio = 3.5
coef_history = -0.05
coef_age = -0.02
coef_home = -0.6
loan_income_ratio = loan_amounts / (incomes + 1e-6)
log_odds = (
    coef_intercept
    + coef_ratio * loan_income_ratio
    + coef_history * credit_history
    + coef_age * ages
    + coef_home * home_owner
)
default_prob = 1 / (1 + np.exp(-log_odds))
defaults = np.random.binomial(1, default_prob, N)

df = pd.DataFrame({
    'age': ages,
    'income': incomes.astype(int),
    'loan_amount': loan_amounts.astype(int),
    'credit_history_yrs': credit_history,
    'home_owner': home_owner,
    'loan_income_ratio': loan_income_ratio,
    'default': defaults
})

df.head()

features = ['age', 'income', 'loan_amount', 'credit_history_yrs', 'home_owner', 'loan_income_ratio']
scaler = MinMaxScaler()
df[features] = scaler.fit_transform(df[features])
df.head()

X = df[features]
y = df['default']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

models = {
    'Logistic Regression': LogisticRegression(),
    'Decision Tree': DecisionTreeClassifier(),
    'Random Forest': RandomForestClassifier(n_estimators=100)
}

for name, model in models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    y_pred_proba = model.predict_proba(X_test)[:, 1]

    print(f"\n{name} Classification Report:")
    print(classification_report(y_test, y_pred))
    print(f"{name} ROC-AUC Score: ", roc_auc_score(y_test, y_pred_proba))

