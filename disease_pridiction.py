# -*- coding: utf-8 -*-
"""Disease_Pridiction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Caphj9UcqUb7s2jMGWEjdhljwOfCJvOK
"""

# Install XGBoost if needed
!pip install xgboost imbalanced-learn

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.metrics import classification_report, roc_auc_score
from sklearn.svm import SVC
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from xgboost import XGBClassifier
from imblearn.over_sampling import RandomOverSampler

import pandas as pd

# Load UCI Heart Disease Dataset directly from the UCI ML Repository (processed Cleveland dataset)
url = "https://archive.ics.uci.edu/ml/machine-learning-databases/heart-disease/processed.cleveland.data"

# Column names as per dataset documentation
columns = [
    'age', 'sex', 'cp', 'trestbps', 'chol', 'fbs',
    'restecg', 'thalach', 'exang', 'oldpeak', 'slope',
    'ca', 'thal', 'target'
]

# Load dataset
data = pd.read_csv(url, header=None, names=columns, na_values='?')

# Display first 5 rows and info
print(data.head())
print(data.info())

# Encode categorical columns if any
le = LabelEncoder()
for col in data.columns:
    if data[col].dtype == 'object':
        data[col] = le.fit_transform(data[col])

# Define features and label
X = data.drop('target', axis=1)   # For heart disease dataset ('target' is the label)
y = data['target']

# Convert target to binary (0: no disease, >0: disease)
y = (y > 0).astype(int)

# Handle missing values using imputation
from sklearn.impute import SimpleImputer
imputer = SimpleImputer(strategy='mean')
X = imputer.fit_transform(X)


# Balance classes if needed
ros = RandomOverSampler(random_state=42)
X_res, y_res = ros.fit_resample(X, y)

# Standardize features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X_res)

X_train, X_test, y_train, y_test = train_test_split(
    X_scaled, y_res, test_size=0.2, random_state=42, stratify=y_res)

models = {
    'Logistic Regression': LogisticRegression(),
    'Random Forest': RandomForestClassifier(n_estimators=100, random_state=42),
    'SVM': SVC(probability=True, random_state=42),
    'XGBoost': XGBClassifier(use_label_encoder=False, eval_metric='logloss', random_state=42)
}
for name, model in models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    y_proba = model.predict_proba(X_test)[:, 1] if hasattr(model, "predict_proba") else model.decision_function(X_test)

    print(f"\n{name} Report:")
    print(classification_report(y_test, y_pred))
    print(f"{name} ROC-AUC: ", roc_auc_score(y_test, y_proba))

# Example: Predict for a new patient (replace with actual input vector)
sample = np.array([X[0]])  # Use the first patient as a test
sample_scaled = scaler.transform(sample)

for name, model in models.items():
    prediction = model.predict(sample_scaled)
    print(f"{name} prediction: {prediction[0]}")

